<script>
  import { props, children } from '@ossph/temple';
  // Separate component related props from field attributes
  const { 
    block,     full,    color,
    xs,        sm,      md,
    lg,        xl,      xl2, 
    xl3,       xl4,     xl5, 
    curved,    rounded, pill,
    info,      warning, success, 
    error,     muted,   primary, 
    secondary, outline, transparent, 
    solid,     style,   href,  
    ...attributes 
  } = props();

  const config = {
    classes: [ 'inline-block tx-center tx-nodecor' ],
    styles: ''
  }

  if (block) {
    config.classes.push('block');
  }
  if (full) {
    config.classes.push('w-full');
  }

  //determine size
  const size = xs ? 'py-2 px-4' 
    : sm ? 'py-4 px-8' 
    : md ? 'py-6 px-12' 
    : lg ? 'py-8 px-16' 
    : xl ? 'py-10 px-20' 
    : xl2 ? 'py-12 px-24' 
    : xl3 ? 'py-14 px-28' 
    : xl4 ? 'py-16 px-32' 
    : xl5 ? 'py-18 px-36' 
    : 'py-6 px-12';
  config.classes.push(size);

  const layout = outline 
    ? 'outline' 
    : transparent
    ? 'transparent'
    : solid 
    ? 'solid'
    : 'solid';

  if (curved) {
    config.classes.push('b-rad-curved');
  } else if (rounded) {
    config.classes.push('b-rad-rounded');
  } else if (pill) {
    config.classes.push('b-rad-pill');
  }

  if (layout === 'outline' || layout === 'transparent') {
    config.classes.push('b-solid', 'b-thin');
    if (layout === 'outline') {
      config.classes.push('bg-white');
    }
    if (color) {
      config.styles += `border-color: ${color};`;
      config.styles += `color: ${color};`;
    } else if (info) {
      config.classes.push('b-info', 'tx-info');
    } else if (warning) {
      config.classes.push('b-warning', 'tx-warning');
    } else if (success) {
      config.classes.push('b-success', 'tx-success');
    } else if (error) {
      config.classes.push('b-error', 'tx-error');
    } else if (muted) {
      config.classes.push('b-muted', 'tx-muted');
    } else if (primary) {
      config.classes.push('b-primary', 'tx-primary');
    } else if (secondary) {
      config.classes.push('b-secondary', 'tx-secondary');
    }
  } else {
    config.classes.push('tx-white');
    if (color) {
      config.styles += `background-color: ${color};`;
    } else if (info) {
      config.classes.push('bg-info');
    } else if (warning) {
      config.classes.push('bg-warning');
    } else if (success) {
      config.classes.push('bg-success');
    } else if (error) {
      config.classes.push('bg-error');
    } else if (muted) {
      config.classes.push('bg-muted');
    } else if (primary) {
      config.classes.push('bg-primary');
    } else if (secondary) {
      config.classes.push('bg-secondary');
    }
  } 

  const styles = config.styles + (style || '');
  const classnames = config.classes.join(' ');
  const childlist = children();
</script>
<if true={href}>
  <a {...attributes} class={classnames} style={styles} {href}>
    {children()}
  </a>
<else />
  <button {...attributes} class={classnames} style={styles}>
    {children()}
  </button>
</if>