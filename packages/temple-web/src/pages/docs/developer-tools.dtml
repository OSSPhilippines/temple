<link rel="import" type="template" href="@/modules/html/head.tml" name="html-head" />
<link rel="import" type="template" href="@/modules/panel/head.tml" name="panel-head" />
<link rel="import" type="template" href="@/modules/panel/left.tml" name="panel-left" />
<link rel="import" type="component" href="@/modules/panel/main.tml" name="panel-main" />
<link rel="import" type="component" href="@/modules/ide/code.tml" name="ide-code" />
<link rel="import" type="component" href="@/modules/ide/app.tml" name="ide-app" />
<link rel="import" type="component" href="@/modules/i18n/translate.tml" name="i18n-translate" />
<script>
  import { env } from '@ossph/temple';
  import { _ } from '@/modules/i18n';

  const url = '/docs/developer-tools.html';
  const title = _('Developer Tools - Temple reactive web component template engine.');
  const description = _('Enable tools for a better developer experience and debugging.');
  const toggle = _ => {
    document.body.classList.toggle('panel-left-open');
  };
</script>
<html>
  <html-head />
  <body class="dark panel with-head with-left">
    <panel-head />
    <panel-left />
    <panel-main class="panel-main">
      <div class="docs container">
        <h1>{_('Developer Tools')}</h1>

        <i18n-translate p trim>
          Temple provides a separate package for a better development 
          experience when working with server frameworks that utilize 
          the native http module. Start by installing adding 
          <ide-code lang="js" inline>{`'@ossph/temple-dev'`}</ide-code>
          to your project.
        </i18n-translate>
        <ide-app title="Terminal">
          <ide-code lang="bash">
            npm install --save-dev @ossph/temple-dev
          </ide-code>
        </ide-app>
        <i18n-translate p trim>
          Next, import the <ide-code lang="js" inline>{`dev()`}</ide-code> 
          function from the package and use it in your existing 
          <ide-code lang="js" inline>{`'src/index.ts'`}</ide-code> 
          file to create a development server as shown in the example below.
        </i18n-translate>
        <ide-app title="src/index.ts">
          <ide-code lang="js" numbers trim detab={12}>{`
            import http from 'http';
            import temple from '@ossph/temple/compiler';
            import { dev } from '@ossph/temple-dev';

            //create temple compiler
            const compiler = temple({ cwd: __dirname });
            //1. create dev tools
            const { router, refresh } = dev({ cwd: __dirname });

            //create http server
            const server = http.createServer(async (req, res) => {
              //2. Add dev router
              if (router(req, res)) return;
              //if home page
              if (req.url === '/') {
                //3. sync builder with refresh server
                refresh.sync(compiler.fromSource('./page.dtml'));
                //compile the document
                const html = await compiler.render('./page.dtml');
                //... send response ...
              }
              //... other routes ...
            });
            //listen on port 3000
            server.listen(3000);
          `}</ide-code>
        </ide-app>
        <i18n-translate p trim>
          Lastly, update the document file 
          <ide-code lang="js" inline>{`'src/page.dtml'`}</ide-code> 
          to include the development script 
          <ide-code inline>{`<script src="/dev.js"></script>`}</ide-code> 
          as shown below.
        </i18n-translate>
        <ide-app title="src/page.dtml">
          <ide-code numbers trim detab={12}>{`
            <script>
              //... 
            </script>
            <html>
              <head>
                <!-- ... -->
                <!-- 4. include dev script -->
                <script src="/dev.js"></script>
              </head>
              <body>
                <!-- ... -->
              </body>
            </html>
          `}</ide-code>
        </ide-app>
        <i18n-translate p trim>
          Run the following command in terminal.
        </i18n-translate>
        <ide-app title="Terminal">
          <ide-code lang="bash">
            npx ts-node src/index.ts
          </ide-code>
        </ide-app>
        <i18n-translate p trim>
          Whenever <ide-code lang="js" inline>{`'src/page.dtml'`}</ide-code> 
          is updated, the development server will automatically refresh 
          the page. Components will also be updated in real-time.
        </i18n-translate>
        
        <nav class="pager">
          <a class="prev" href="/temple/docs/component-publisher.html">
            <i class="fas fa-fw fa-chevron-left"></i>
            {_('Component Publisher')}
          </a>
        </nav>
      </div>
      <footer class="foot"></footer>
    </panel-main>
  </body>
</html>