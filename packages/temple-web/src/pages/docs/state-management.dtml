<link rel="import" type="template" href="@/modules/html/head.tml" name="html-head" />
<link rel="import" type="template" href="@/modules/panel/head.tml" name="panel-head" />
<link rel="import" type="template" href="@/modules/panel/left.tml" name="panel-left" />
<link rel="import" type="component" href="@/modules/panel/main.tml" name="panel-main" />
<link rel="import" type="component" href="@/modules/ide/code.tml" name="ide-code" />
<link rel="import" type="component" href="@/modules/ide/app.tml" name="ide-app" />
<link rel="import" type="component" href="@/modules/api/ui.tml" name="api-ui" />
<link rel="import" type="component" href="@/modules/tui/alert.tml" name="tui-alert" />
<link rel="import" type="component" href="@/modules/i18n/translate.tml" name="i18n-translate" />
<style>
  .col-2 {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
</style>
<script>
  import { env } from '@ossph/temple';
  import { _ } from '@/modules/i18n';

  const url = '/docs/state-management.html';
  const title = _('State Management - Temple reactive web component template engine.');
  const description = _('Learn how to manage states in Temple.');
  const toggle = _ => {
    document.body.classList.toggle('panel-left-open');
  };
</script>
<html>
  <html-head />
  <body class="dark panel with-head with-left with-right">
    <panel-head />
    <panel-left />
    <aside class="panel-right right">
      <h6>{_('On this page')}</h6>
      <nav>
        <a href="#props">{_('Props')}</a>
        <a href="#signals">{_('Signals')}</a>
        <a href="#events">{_('Events')}</a>
        <a href="#classnames">{_('Class Names')}</a>
        <a href="#children">{_('Children')}</a>
        <a href="#env">{_('Env Variables')}</a>
        <a href="#this">{_('this')}</a>
      </nav>
    </aside>
    <panel-main class="panel-main">
      <div class="docs container">
        <h1>{_('State Management')}</h1>

        <i18n-translate p trim>
          Temple provides several ways to manage properties and states 
          in your components.
        </i18n-translate>

        <a name="props"></a>
        <h2>{_('Props')}</h2>

        <ide-code lang="js" trim detab={10}>{`
          import { props } from '@ossph/temple';
          const { title, description } = props();
        `}</ide-code>

        <i18n-translate p trim>
          The <code>props</code> function can be used to access the 
          properties of a component.
        </i18n-translate>

        <a name="signals"></a>
        <h2>{_('Signals')}</h2>

        <p>
          Temple provides a reactive state management system that allows 
          you to manage states in your components. The system is based 
          on signals, which are reactive variables that can be used to 
          store and update data. Signals can be used to store any type 
          of data, including numbers, strings, objects, arrays, and even 
          functions.
        </p>

        <ide-code trim detab={10}>{`
          <script>
            import { signal } from '@ossph/temple';
            const count = signal<number>(1);
          </script>
          <em class=classlist>Count #{count.value}</em>
        `}</ide-code>

        <i18n-translate p trim>
          To create a signal, you can use the 
          <ide-code type="javascript" inline>{`signal()`}</ide-code> 
          function, which takes an initial value as an argument. Signals 
          can be read and updated using the <code>value</code> property. 
          Setting the value will trigger a re-render of the component.
        </i18n-translate>

        <i18n-translate p trim>
          Signals can be used in your components to manage states and 
          trigger updates when the state changes. You can use signals to 
          store data that needs to be shared between components, or to 
          trigger side effects when the state changes. Signals can also 
          be used to store data that needs to be persisted across page 
          reloads, such as form data or user preferences.
        </i18n-translate>

        <a name="events"></a>
        <h2>{_('Events')}</h2>

        <ide-code trim number detab={10}>{`
          <script>
            import { signal } from '@ossph/temple';
            const count = signal<number>(1);
            const add = e => count.value++;
          </script>

          <button click=add>{count.value}</button>

          <button dblclick=add>{count.value}</button>
          <button mousedown=add>{count.value}</button>
          <button mouseup=add>{count.value}</button>
          <button mousemove=add>{count.value}</button>
          <button mouseover=add>{count.value}</button>
          <button mouseout=add>{count.value}</button>
          <button wheel=add>{count.value}</button>
          <button keydown=add>{count.value}</button>
          <button keypress=add>{count.value}</button>
          <button keyup=add>{count.value}</button>
        `}</ide-code>

        <i18n-translate p trim>
          For example, you can use the <ide-code inline>click</ide-code> 
          attribute assigned to a function to trigger a function when 
          the element is clicked. In combination with updating a signal, 
          can trigger a re-render of the component. The following event 
          attributes are supported.
        </i18n-translate>

        <div class="col-2">
          <div>
            <h3>{_('Mouse Events')}</h3>
            <ul>
              <li><ide-code inline>click</ide-code></li>
              <li><ide-code inline>dblclick</ide-code></li>
              <li><ide-code inline>mousedown</ide-code></li>
              <li><ide-code inline>mouseup</ide-code></li>
              <li><ide-code inline>mousemove</ide-code></li>
              <li><ide-code inline>mouseover</ide-code></li>
              <li><ide-code inline>mouseout</ide-code></li>
              <li><ide-code inline>wheel</ide-code></li>
            </ul>
            <h3>{_('Keyboard Events')}</h3>
            <ul>
              <li><ide-code inline>keydown</ide-code></li>
              <li><ide-code inline>keypress</ide-code></li>
              <li><ide-code inline>keyup</ide-code></li>
            </ul>
            <h3>{_('Form Events')}</h3>
            <ul>
              <li><ide-code inline>blur</ide-code></li>
              <li><ide-code inline>change</ide-code></li>
              <li><ide-code inline>contextmenu</ide-code></li>
              <li><ide-code inline>focus</ide-code></li>
              <li><ide-code inline>input</ide-code></li>
              <li><ide-code inline>submit</ide-code></li>
              <li><ide-code inline>invalid</ide-code></li>
              <li><ide-code inline>reset</ide-code></li>
              <li><ide-code inline>search</ide-code></li>
              <li><ide-code inline>select</ide-code></li>
            </ul>
            <h3>{_('Clipboard Events')}</h3>
            <ul>
              <li><ide-code inline>copy</ide-code></li>
              <li><ide-code inline>cut</ide-code></li>
              <li><ide-code inline>paste</ide-code></li>
            </ul>
            <h3>{_('Transition Events')}</h3>
            <ul>
              <li><ide-code inline>transitionend</ide-code></li>
            </ul>
          </div>
          <div>
            <h3>{_('Drag Events')}</h3>
            <ul>
              <li><ide-code inline>drag</ide-code></li>
              <li><ide-code inline>dragstart</ide-code></li>
              <li><ide-code inline>dragend</ide-code></li>
              <li><ide-code inline>dragover</ide-code></li>
              <li><ide-code inline>dragenter</ide-code></li>
              <li><ide-code inline>dragleave</ide-code></li>
              <li><ide-code inline>drop</ide-code></li>
              <li><ide-code inline>scroll</ide-code></li>
            </ul>
            <h3>{_('Media Events')}</h3>
            <ul>
              <li><ide-code inline>durationchange</ide-code></li>
              <li><ide-code inline>ended</ide-code></li>
              <li><ide-code inline>error</ide-code></li>
              <li><ide-code inline>loadeddata</ide-code></li>
              <li><ide-code inline>loadedmetadata</ide-code></li>
              <li><ide-code inline>loadstart</ide-code></li>
              <li><ide-code inline>pause</ide-code></li>
              <li><ide-code inline>play</ide-code></li>
              <li><ide-code inline>playing</ide-code></li>
              <li><ide-code inline>progress</ide-code></li>
              <li><ide-code inline>ratechange</ide-code></li>
              <li><ide-code inline>seeked</ide-code></li>
              <li><ide-code inline>seeking</ide-code></li>
              <li><ide-code inline>stalled</ide-code></li>
              <li><ide-code inline>suspend</ide-code></li>
              <li><ide-code inline>timeupdate</ide-code></li>
              <li><ide-code inline>volumechange</ide-code></li>
              <li><ide-code inline>waiting</ide-code></li>
            </ul>
            <h3>{_('Animation Events')}</h3>
            <ul>
              <li><ide-code inline>animationstart</ide-code></li>
              <li><ide-code inline>animationend</ide-code></li>
              <li><ide-code inline>animationiteration</ide-code></li>
            </ul>
          </div>
        </div>

        <a name="classnames"></a>
        <h2>{_('Class Names')}</h2>

        <ide-code lang="js" trim detab={10}>{`
          import { classnames } from '@ossph/temple';
          const classlist = classnames(); //--> 'class1 class2 class3'
        `}</ide-code>

        <i18n-translate p trim>
          The <code>classnames</code> function can be used to generate 
          a list of class names based on the properties of an object.
        </i18n-translate>

        <a name="children"></a>
        <h2>{_('Children')}</h2>

        <ide-code lang="js" trim detab={10}>{`
          import { children } from '@ossph/temple';
          const childlist = children(); //--> Node[]
        `}</ide-code>
        <i18n-translate p trim>
          The <code>children</code> function can be used to render 
          child components in a parent component.
        </i18n-translate>

        <a name="env"></a>
        <h2>{_('Environment Variables')}</h2>

        <ide-code trim detab={10}>{`
          <script>
            import { env } from '@ossph/temple';
            const { BUILD_ID, NODE_ENV } = env();
          </script>
          <if true={NODE_ENV === 'development'}>
            <p>Development mode</p>
          </if>
        `}</ide-code>
        <i18n-translate p trim>
          The <code>env</code> function can be used to access environment 
          variables in a component.
        </i18n-translate>

        <a name="this"></a>
        <h2>{_('this')}</h2>

        <ide-app title="What's this">
          <ide-code numbers detab={12}>{`
            <script>
              this.props;
              this.style;
              this.classList;
              this.parentNode;
              this.innerHTML;
              this.appendChild();
              this.querySelector('p');
            </script>
          `}</ide-code>
        </ide-app>

        <i18n-translate p trim>
          <ide-code inline>this</ide-code> refers to the 
          <ide-code inline>TempleComponent</ide-code> that extends 
          <ide-code inline>HTMLElement</ide-code>. This means all
          components in Temple are in fact are HTML elements and has
          access to the common functionality like 
          <ide-code inline>innerHTML</ide-code> and
          <ide-code inline>{`querySelector()`}</ide-code> to name a 
          few. <ide-code inline>TempleComponent</ide-code> has the
          additional following properties and methods that you can access
          using <ide-code inline>this</ide-code>.
        </i18n-translate>

        <api-ui start="TempleComponent" />

        <tui-alert curved info>
          <i class="fas fa-fw fa-info-circle"></i>
          <strong>Info:</strong> You can discover more methods and properties
          of the <code>HTMLElement</code> class on the
          <a 
            target="_blank"
            href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
          >
            MDN Web Docs
          </a>.
        </tui-alert>
        
        <nav class="pager">
          <a class="prev" href="/temple/docs/markup-syntax.html">
            <i class="fas fa-fw fa-chevron-left"></i>
            {_('Markup Syntax')}
          </a>
          <a class="next" href="/temple/docs/component-strategy.html">
            {_('Component Strategy')}
            <i class="fas fa-fw fa-chevron-right"></i>
          </a>
        </nav>
      </div>
      <footer class="foot"></footer>
    </panel-main>
  </body>
</html>