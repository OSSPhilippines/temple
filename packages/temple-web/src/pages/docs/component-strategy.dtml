<link rel="import" type="template" href="@/modules/html/head.tml" name="html-head" />
<link rel="import" type="template" href="@/modules/panel/head.tml" name="panel-head" />
<link rel="import" type="template" href="@/modules/panel/left.tml" name="panel-left" />
<link rel="import" type="component" href="@/modules/panel/main.tml" name="panel-main" />
<link rel="import" type="component" href="@/modules/ide/code.tml" name="ide-code" />
<link rel="import" type="component" href="@/modules/ide/app.tml" name="ide-app" />
<link rel="import" type="component" href="@/modules/tui/tab.tml" name="tui-tab" />
<link rel="import" type="component" href="@/modules/tui/alert.tml" name="tui-alert" />
<link rel="import" type="component" href="@/modules/i18n/translate.tml" name="i18n-translate" />
<script>
  import { env } from '@ossph/temple';
  import { _ } from '@/modules/i18n';

  const url = '/docs/component-strategy.html';
  const title = _('Component Strategy - Temple reactive web component template engine.');
  const description = _('Learn more about web components and how they work with Temple.');
  const toggle = _ => {
    document.body.classList.toggle('panel-left-open');
  };
</script>
<html>
  <html-head />
  <body class="dark panel with-head with-left with-right">
    <panel-head />
    <panel-left />
    <aside class="panel-right right">
      <h6>{_('On this page')}</h6>
      <nav>
        <a href="#document">{_('Document')}</a>
        <a href="#template">{_('Template')}</a>
        <a href="#component">{_('Component')}</a>
        <nav>
          <a href="#strat-1">{_('Strategy 1')}</a>
          <a href="#strat-2">{_('Strategy 2')}</a>
          <a href="#strat-3">{_('Strategy 3')}</a>
          <a href="#strat-4">{_('Strategy 4')}</a>
        </nav>
        <a href="#fouc">{_('FOUC')}</a>
      </nav>
    </aside>
    <panel-main class="panel-main">
      <div class="docs container">
        <h1>{_('Component Strategy')}</h1>

        <i18n-translate p trim>
          There are three types of components in Temple: Document, 
          Template, and Component. Each type of component has a 
          different strategy for rendering and updating the DOM. The 
          Document component is the root component of the application 
          and is responsible for rendering the entire application. The 
          Template component is a reusable component that can be used 
          in multiple places in the application. The Component component 
          is a custom component that can be used to create complex UI 
          elements.
        </i18n-translate>

        <a name="document"></a>
        <h2>{_('Document')}</h2>

        <i18n-translate p trim>
          A document denoted by files with the 
          <ide-code inline>.dtml</ide-code> extension, is the root of
          each page view that should include the document markup 
          starting with <ide-code inline>{`<html>`}</ide-code>. While 
          it looks like another Temple component, there are some key 
          differences in how it is used.
        </i18n-translate>

        <ul>
          <li>
            <i18n-translate p trim>
              A document logic (<ide-code inline>{`<script>`}</ide-code>)
              is executed on the client side but is not a 
              <ide-code inline>TempleComponent</ide-code>, which means 
              it cannot be re-rendered and does not have access to 
              <ide-code inline>this</ide-code> context.
            </i18n-translate>
          </li>
          <li>
            <i18n-translate p trim>
              A document <ide-code inline>{`props()`}</ide-code> are the 
              server props passed down to the client.
            </i18n-translate>
          </li>
          <li>
            <i18n-translate p trim>
              A document does not have access to NodeJS functionality. So 
              things like <ide-code inline>fs</ide-code> are not available.
            </i18n-translate>
          </li>
        </ul>

        <tui-alert curved info>
          <i class="fas fa-fw fa-info-circle"></i>
          <strong>Recommendation:</strong> You should do server related
          logic on the server framework and pass the neccesary data 
          to the client.
        </tui-alert>

        <ide-app panel={250} title="Passing Server Props">
          <div class="panel-head">
            <div class="tabs">
              <tui-tab class="tab active" group="document" selector="#index-ts">
                src/index.ts
              </tui-tab>
              <tui-tab class="tab" group="document" selector="#page-dtml">
                src/page.dtml
              </tui-tab>
            </div>
          </div>
          <div class="panel-left">
            <h5 class="folder">
              <i class="fas fa-fw fa-chevron-down"></i>
              <span>src</span>
            </h5>
            <tui-tab class="shift-1 block active" group="document" selector="#index-ts">
              <i class="fas fa-fw fa-file"></i>
              index.ts
            </tui-tab>
            <tui-tab class="shift-1 block" group="document" selector="#page-dtml">
              <i class="fas fa-fw fa-file"></i>
              page.dtml
            </tui-tab>
          </div>
          <div class="panel-main">
            <main>
              <ide-code id="index-ts" lang="js" numbers trim detab={16}>{`
                import http from 'http';
                import temple from '@ossph/temple/compiler';

                const compiler = temple({ cwd: __dirname });
                const server = http.createServer(async (req, res) => {
                  //pass server props to document
                  res.end(await compiler.render('./index.dtml', {
                    title: 'Hello World'
                  }));
                });
              `}</ide-code>
              <ide-code id="page-dtml" style="display:none" numbers trim detab={16}>{`
                <script>
                  import { props } from '@ossph/temple';
                  //from the server
                  const { title } = props();
                </script>
                <html>
                  <body>
                    <h1 class="title">{title}</h1>
                  </body>
                </html>
              `}</ide-code>
            </main>
          </div>
        </ide-app>

        <a name="template"></a>
        <h2>{_('Template')}</h2>

        <i18n-translate p trim>
          A template is resuable partial markup that can be imported by 
          a component, document or another template. A template is 
          not is not a <ide-code inline>TempleComponent</ide-code>, but 
          rather adds its markup to the parent component's final markup.
          You will not see a template in the DOM, but rather the
          markup it contains.
        </i18n-translate>

        <i18n-translate p trim>
          For example, consider a document that contains the following 
          markup.
        </i18n-translate>

        <ide-code trim detab={10}>{`
          <script>
            const title = 'Hello World';
          </script>
          <html>
            <head>
              <meta charset="utf-8" />
              <title>{title}</title>
            </head>
            <body>
              <h1>{title}</h1>
            </body>
          </html>
        `}</ide-code>

        <i18n-translate p trim>
          You can create a template for the head of your
          document and then import it. This allows you to
          reuse the head markup in multiple documents.
        </i18n-translate>

        <ide-app panel={250} title="Using Templates">
          <div class="panel-head">
            <div class="tabs">
              <tui-tab class="tab active" group="templates" selector="#page2-dtml">
                src/page.dtml
              </tui-tab>
              <tui-tab class="tab" group="templates" selector="#head-tml">
                src/head.tml
              </tui-tab>
            </div>
          </div>
          <div class="panel-left">
            <h5 class="folder">
              <i class="fas fa-fw fa-chevron-down"></i>
              <span>src</span>
            </h5>
            <tui-tab class="shift-1 block active" group="templates" selector="#page2-dtml">
              <i class="fas fa-fw fa-file"></i>
              page.dtml
            </tui-tab>
            <tui-tab class="shift-1 block" group="templates" selector="#head-tml">
              <i class="fas fa-fw fa-file"></i>
              head.tml
            </tui-tab>
          </div>
          <div class="panel-main">
            <main>
              <ide-code id="page2-dtml" numbers trim detab={16}>{`
                <link rel="import" type="template" href="./head.tml" name="html-head" />
                <script>
                  const title = 'Hello World';
                </script>
                <html>
                  <html-head />
                  <body>
                    <h1>{title}</h1>
                  </body>
                </html>
              `}</ide-code>
              <ide-code id="head-tml" style="display:none" numbers trim detab={16}>{`
                <head>
                  <meta charset="utf-8" />
                  <title>{title}</title>
                </head>
              `}</ide-code>
            </main>
          </div>
        </ide-app>

        <tui-alert curved info>
          <i class="fas fa-fw fa-info-circle"></i>
          <strong>Note:</strong> Template partials do not process 
          attributes or children if given.
        </tui-alert>

        <i18n-translate p trim>
          Variables used in a template should be declared in the
          parent component or document. This allows you to pass
          data to the template from the parent.
        </i18n-translate>

        <a name="component"></a>
        <h2>{_('Component')}</h2>

        <i18n-translate p trim>
          All temple components are 
          <ide-code inline>TempleComponent</ide-code> that extends
          <ide-code inline>HTMLElement</ide-code> and therefore is 
          both a web component and element just like any other element 
          in the browser DOM. Components that do not use the
          <ide-code inline>{`<style>`}</ide-code> tag are affected by 
          the global styles of the application. Components with the
          <ide-code inline>{`<style>`}</ide-code> tag enable the 
          component's shadow DOM and will encapsulate the styles within
          the component and not be affected by global styles. With that 
          said, there are several strategies that can be applied to 
          Temple components.
        </i18n-translate>

        <a name="strat-1"></a>
        <h3>{_('Strategy 1: No Components')}</h3>

        <i18n-translate p trim>
          This strategy uses only documents and templates. This 
          strategy is useful for simple applications that do not require 
          complex UI elements. This is the best strategy for 
          performant applications.
        </i18n-translate>

        <ide-app panel={400} title="No Components">
          <div class="panel-head">
            <div class="tabs">
              <tui-tab class="tab active" group="strat-1" selector="#page3-dtml">
                src/page.dtml
              </tui-tab>
              <tui-tab class="tab" group="strat-1" selector="#head3-tml">
                src/head.tml
              </tui-tab>
              <tui-tab class="tab" group="strat-1" selector="#header3-tml">
                src/header.tml
              </tui-tab>
              <tui-tab class="tab" group="strat-1" selector="#footer3-tml">
                src/footer.tml
              </tui-tab>
            </div>
          </div>
          <div class="panel-left">
            <h5 class="folder">
              <i class="fas fa-fw fa-chevron-down"></i>
              <span>src</span>
            </h5>
            <tui-tab class="shift-1 block active" group="strat-1" selector="#page3-dtml">
              <i class="fas fa-fw fa-file"></i>
              page.dtml
            </tui-tab>
            <tui-tab class="shift-1 block" group="strat-1" selector="#head3-tml">
              <i class="fas fa-fw fa-file"></i>
              head.tml
            </tui-tab>
            <tui-tab class="shift-1 block" group="strat-1" selector="#header3-tml">
              <i class="fas fa-fw fa-file"></i>
              header.tml
            </tui-tab>
            <tui-tab class="shift-1 block" group="strat-1" selector="#footer3-tml">
              <i class="fas fa-fw fa-file"></i>
              footer.tml
            </tui-tab>
          </div>
          <div class="panel-main">
            <main>
              <ide-code id="page3-dtml" numbers trim detab={16}>{`
                <link rel="import" type="template" href="./head.tml" name="html-head" />
                <link rel="import" type="template" href="./header.tml" name="page-header" />
                <link rel="import" type="template" href="./footer.tml" name="page-footer" />
                <script>
                  import { env } from '@ossph/temple';
                  const { BUILD_ID, APP_DATA } = env();
                  const title = 'Hello World';
                </script>
                <html>
                  <html-head />
                  <body>
                    <page-header />
                    <main>
                      <h1>{title}</h1>
                    </main>
                    <page-footer />
                  </body>
                </html>
              `}</ide-code>
              <ide-code id="head3-tml" style="display:none" numbers trim detab={16}>{`
                <head>
                  <meta charset="utf-8" />
                  <title>{title}</title>

                  <link rel="stylesheet" type="text/css" href={\`/build/$\{BUILD_ID}.css\`} />
                  <script data-app={APP_DATA} src={\`/build/\${BUILD_ID}.js\`}></script>
                </head>
              `}</ide-code>
              <ide-code id="header3-tml" style="display:none" numbers trim detab={16}>{`
                <header>
                  <img src="/logo.png" alt="Logo" />
                  <h6>Brand</h6>
                </header>
              `}</ide-code>
              <ide-code id="footer3-tml" style="display:none" numbers trim detab={16}>{`
                <footer>
                  <a href="/about">About</a>
                  <copy>&copy; 2025</copy>
                </footer>
              `}</ide-code>
            </main>
          </div>
        </ide-app>

        <a name="strat-2"></a>
        <h3>{_('Strategy 2: Shallow Components')}</h3>

        <i18n-translate p trim>
          This strategy uses components that do not have a 
          <ide-code inline>{`<style>`}</ide-code> tag and is useful for 
          applications that require complex logic in components but 
          using a shared global stylesheet.
        </i18n-translate>

        <ide-app panel={400} title="Shallow Components">
          <div class="panel-head">
            <div class="tabs">
              <tui-tab class="tab active" group="strat-2" selector="#page4-dtml">
                src/page.dtml
              </tui-tab>
              <tui-tab class="tab" group="strat-2" selector="#header4-tml">
                src/header.tml
              </tui-tab>
              <tui-tab class="tab" group="strat-2" selector="#footer4-tml">
                src/footer.tml
              </tui-tab>
            </div>
          </div>
          <div class="panel-left">
            <h5 class="folder">
              <i class="fas fa-fw fa-chevron-down"></i>
              <span>src</span>
            </h5>
            <tui-tab class="shift-1 block active" group="strat-2" selector="#page4-dtml">
              <i class="fas fa-fw fa-file"></i>
              page.dtml
            </tui-tab>
            <tui-tab class="shift-1 block" group="strat-2" selector="#header4-tml">
              <i class="fas fa-fw fa-file"></i>
              header.tml
            </tui-tab>
            <tui-tab class="shift-1 block" group="strat-2" selector="#footer4-tml">
              <i class="fas fa-fw fa-file"></i>
              footer.tml
            </tui-tab>
          </div>
          <div class="panel-main">
            <main>
              <ide-code id="page4-dtml" numbers trim detab={16}>{`
                <link rel="import" type="component" href="./header.tml" name="page-header" />
                <link rel="import" type="component" href="./footer.tml" name="page-footer" />
                <script>
                  import { env } from '@ossph/temple';
                  const { BUILD_ID, APP_DATA } = env();
                  const title = 'Hello World';
                  const brand = 'Acme Inc.';
                  const logo = '/logo.png';
                </script>
                <html>
                  <head>
                    <meta charset="utf-8" />
                    <title>{title}</title>
                    <link rel="stylesheet" type="text/css" href="/styles.css" />

                    <link rel="stylesheet" type="text/css" href={\`/build/$\{BUILD_ID}.css\`} />
                    <script data-app={APP_DATA} src={\`/build/\${BUILD_ID}.js\`}></script>
                  </head>
                  <body>
                    <page-header {brand} {logo} />
                    <main>
                      <h1>{title}</h1>
                    </main>
                    <page-footer {brand} />
                  </body>
                </html>
              `}</ide-code>
              <ide-code id="header4-tml" style="display:none" numbers trim detab={16}>{`
                <script>
                  import { props } from '@ossph/temple';
                  const { brand, logo } = props();
                </script>
                <header>
                  <img src={logo} alt={brand} />
                  <h6>{brand}</h6>
                </header>
              `}</ide-code>
              <ide-code id="footer4-tml" style="display:none" numbers trim detab={16}>{`
                <script>
                  import { props } from '@ossph/temple';
                  const { brand } = props();
                </script>
                <footer>
                  <a href="/about">About</a>
                  <copy>&copy; 2025 {brand}</copy>
                </footer>
              `}</ide-code>
            </main>
          </div>
        </ide-app>

        <a name="strat-3"></a>
        <h3>{_('Strategy 3: Partial Styling')}</h3>

        <i18n-translate p trim>
          This strategy uses components that do not have a 
          <ide-code inline>{`<style>`}</ide-code> tag,
          but imports style via the 
          <ide-code inline>{`<link>`}</ide-code> tag to utilize both 
          global styles and specific styles that are needed for the
          component. 
        </i18n-translate>

        <ide-app panel={400} title="Shallow Components">
          <div class="panel-head">
            <div class="tabs">
              <tui-tab class="tab" group="strat-3" selector="#page5-dtml">
                src/page.dtml
              </tui-tab>
              <tui-tab class="tab active" group="strat-3" selector="#header5-tml">
                src/header.tml
              </tui-tab>
              <tui-tab class="tab" group="strat-3" selector="#footer5-tml">
                src/footer.tml
              </tui-tab>
            </div>
          </div>
          <div class="panel-left">
            <h5 class="folder">
              <i class="fas fa-fw fa-chevron-down"></i>
              <span>src</span>
            </h5>
            <tui-tab class="shift-1 block" group="strat-3" selector="#page5-dtml">
              <i class="fas fa-fw fa-file"></i>
              page.dtml
            </tui-tab>
            <tui-tab class="shift-1 block active" group="strat-3" selector="#header5-tml">
              <i class="fas fa-fw fa-file"></i>
              header.tml
            </tui-tab>
            <tui-tab class="shift-1 block" group="strat-3" selector="#footer5-tml">
              <i class="fas fa-fw fa-file"></i>
              footer.tml
            </tui-tab>
          </div>
          <div class="panel-main">
            <main>
              <ide-code id="page5-dtml" style="display:none" numbers trim detab={16}>{`
                <link rel="import" type="component" href="./header.tml" name="page-header" />
                <link rel="import" type="component" href="./footer.tml" name="page-footer" />
                <script>
                  import { env } from '@ossph/temple';
                  const { BUILD_ID, APP_DATA } = env();
                  const title = 'Hello World';
                  const brand = 'Acme Inc.';
                  const logo = '/logo.png';
                </script>
                <html>
                  <head>
                    <meta charset="utf-8" />
                    <title>{title}</title>
                    <link rel="stylesheet" type="text/css" href="/styles.css" />

                    <link rel="stylesheet" type="text/css" href={\`/build/$\{BUILD_ID}.css\`} />
                    <script data-app={APP_DATA} src={\`/build/\${BUILD_ID}.js\`}></script>
                  </head>
                  <body>
                    <page-header {brand} {logo} />
                    <main>
                      <h1>{title}</h1>
                    </main>
                    <page-footer {brand} />
                  </body>
                </html>
              `}</ide-code>
              <ide-code id="header5-tml" numbers trim detab={16}>{`
                <link rel="stylesheet" type="text/css" href="/header.css" />
                <script>
                  import { props } from '@ossph/temple';
                  const { brand, logo } = props();
                </script>
                <header>
                  <img src={logo} alt={brand} />
                  <h6>{brand}</h6>
                </header>
              `}</ide-code>
              <ide-code id="footer5-tml" style="display:none" numbers trim detab={16}>{`
                <link rel="stylesheet" type="text/css" href="/footer.css" />
                <script>
                  import { props } from '@ossph/temple';
                  const { brand } = props();
                </script>
                <footer>
                  <a href="/about">About</a>
                  <copy>&copy; 2025 {brand}</copy>
                </footer>
              `}</ide-code>
            </main>
          </div>
        </ide-app>

        <a name="strat-4"></a>
        <h3>{_('Strategy 4: Encapulation')}</h3>

        <i18n-translate p trim>
          This strategy uses components that have a
          <ide-code inline>{`<style>`}</ide-code> tag and encapsulates
          the styles within the component. This strategy is useful for
          applications that require complex UI elements that need to be
          styled in a specific way. This is also useful for components 
          that are designed to be used in multiple projects.
        </i18n-translate>

        <ide-app panel={400} title="Encapsulation">
          <div class="panel-head">
            <div class="tabs">
              <tui-tab class="tab" group="strat-4" selector="#page6-dtml">
                src/page.dtml
              </tui-tab>
              <tui-tab class="tab active" group="strat-4" selector="#header6-tml">
                src/header.tml
              </tui-tab>
              <tui-tab class="tab" group="strat-4" selector="#footer6-tml">
                src/footer.tml
              </tui-tab>
            </div>
          </div>
          <div class="panel-left">
            <h5 class="folder">
              <i class="fas fa-fw fa-chevron-down"></i>
              <span>src</span>
            </h5>
            <tui-tab class="shift-1 block" group="strat-4" selector="#page6-dtml">
              <i class="fas fa-fw fa-file"></i>
              page.dtml
            </tui-tab>
            <tui-tab class="shift-1 block active" group="strat-4" selector="#header6-tml">
              <i class="fas fa-fw fa-file"></i>
              header.tml
            </tui-tab>
            <tui-tab class="shift-1 block" group="strat-4" selector="#footer6-tml">
              <i class="fas fa-fw fa-file"></i>
              footer.tml
            </tui-tab>
          </div>
          <div class="panel-main">
            <main>
              <ide-code id="page6-dtml" style="display:none" numbers trim detab={16}>{`
                <link rel="import" type="component" href="./header.tml" name="page-header" />
                <link rel="import" type="component" href="./footer.tml" name="page-footer" />
                <script>
                  import { env } from '@ossph/temple';
                  const { BUILD_ID, APP_DATA } = env();
                  const title = 'Hello World';
                  const brand = 'Acme Inc.';
                  const logo = '/logo.png';
                </script>
                <html>
                  <head>
                    <meta charset="utf-8" />
                    <title>{title}</title>
                    <link rel="stylesheet" type="text/css" href="/styles.css" />

                    <link rel="stylesheet" type="text/css" href={\`/build/$\{BUILD_ID}.css\`} />
                    <script data-app={APP_DATA} src={\`/build/\${BUILD_ID}.js\`}></script>
                  </head>
                  <body>
                    <page-header {brand} {logo} />
                    <main>
                      <h1>{title}</h1>
                    </main>
                    <page-footer {brand} />
                  </body>
                </html>
              `}</ide-code>
              <ide-code id="header6-tml" numbers trim detab={16}>{`
                <style>
                  img { width: 100px; height: 100px; }
                  h6 { margin: 0; }
                </style>
                <script>
                  import { props } from '@ossph/temple';
                  const { brand, logo } = props();
                </script>
                <header>
                  <img src={logo} alt={brand} />
                  <h6>{brand}</h6>
                </header>
              `}</ide-code>
              <ide-code id="footer6-tml" style="display:none" numbers trim detab={16}>{`
                <style>
                  copy { 
                    display: block; 
                    text-align: center; 
                  }
                </style>
                <script>
                  import { props } from '@ossph/temple';
                  const { brand } = props();
                </script>
                <footer>
                  <a href="/about">About</a>
                  <copy>&copy; 2025 {brand}</copy>
                </footer>
              `}</ide-code>
            </main>
          </div>
        </ide-app>

        <a name="fouc"></a>
        <h2>{_('Flash of Unstyled Content')}</h2>

        <i18n-translate p trim>
          Web Components (custom elements) are 100% defined in 
          JavaScript. That includes their HTML and CSS. Those are 
          programmatically added to the DOM through APIs. By the time 
          the browser has interpreted and executed that code, there is 
          a good chance that the rendering pipeline has already put the 
          custom element on the screen. Since the browser doesn't know 
          about the element the first time around it will render it 
          without the intended styling. After the JavaScript of the 
          custom element definition is executed and the browser, 
          therefore, knows about the CSS rules that apply to that 
          element it can update the view.
        </i18n-translate>

        <i18n-translate p trim>
          A flash of unstyled content (FOUC) can cause irritating layout 
          shifts as well as reveal content that should have been 
          progressively disclosed. In order to prevent a reflow of other 
          content you can add the following general solution to your 
          global stylesheet.
        </i18n-translate>

        <ide-code lang="css" numbers detab={10}>{`
          *:not(:defined) {
            opacity: 0;
          }
        `}</ide-code>

        <i18n-translate p trim>
          This style will apply to all elements that are not defined,
          which are usually web components and will hide the content 
          until the browser has fully rendered the component.
        </i18n-translate>
        
        <nav class="pager">
          <a class="prev" href="/temple/docs/state-management.html">
            <i class="fas fa-fw fa-chevron-left"></i>
            {_('State Management')}
          </a>
          <a class="next" href="/temple/docs/compiler-api.html">
            {_('Compiler API')}
            <i class="fas fa-fw fa-chevron-right"></i>
          </a>
        </nav>
      </div>
      <footer class="foot"></footer>
    </panel-main>
  </body>
</html>