<style>
  :host {
    --black: #222222;
    --white: #FCFCFC;
    --info: #1474FC;
    --error: #DC3545;
    --warning: #FF7B07;
    --success: #28A745;
    --muted: #999999;
  }

  /* Text Colors
  ---------------------------------*/
  .tx-info {
    color: var(--info);
  }
  .tx-error {
    color: var(--error);
  }
  .tx-warning {
    color: var(--warning);
  }
  .tx-success {
    color: var(--success);
  }
  .tx-muted {
    color: var(--muted);
  }

  /* Borders
  ---------------------------------*/
  .curved {
    border-radius: 5px;
  }
  .rounded {
    border-radius:12px;
  }
  .pill {
    border-radius: 10000px;
  }
  .solid {
    border-style: solid;
  }
  .thin {
    border-width: 1px;
  }

  .bd-info {
    border-color: var(--info);
  }
  .bd-error {
    border-color: var(--error);
  }
  .bd-warning {
    border-color: var(--warning);
  }
  .bd-success {
    border-color: var(--success);
  }
  .bd-muted {
    border-color: var(--muted);
  }

  /* Backgrounds
  ---------------------------------*/
  .bg-white {
    background-color: var(--white);
  }
  .bg-info {
    background-color: var(--info);
  }
  .bg-error {
    background-color: var(--error);
  }
  .bg-warning {
    background-color: var(--warning);
  }
  .bg-success {
    background-color: var(--success);
  }
  .bg-muted {
    background-color: var(--muted);
  }

  /* Badge
  ---------------------------------*/
  .badge {
    padding: 2px 8px;
  }
</style>
<script>
  import { props, classnames, children } from '@ossph/temple';
  // Separate component related props from field attributes
  const { 
    color,     info,    warning, success,     
    error,     muted,   solid,   outline,     
    curved,    rounded, pill,    style
  } = props<{
    color?: string,
    info?: boolean, 
    warning?: boolean, 
    success?: boolean, 
    error?: boolean, 
    muted?: boolean, 
    solid?: boolean, 
    outline?: boolean,
    curved?: boolean,
    rounded?: boolean, 
    pill?: boolean,
    style?: string
  }>();

  const config = {
    classes: [ 'badge' ],
    styles: ''
  }

  const layout = outline ? 'outline' 
    : solid ? 'solid'
    : 'solid';

  if (curved) {
    defaults.classes.push('curved');
  } else if (rounded) {
    defaults.classes.push('rounded');
  } else if (pill) {
    defaults.classes.push('pill');
  }

  if (layout === 'outline') {
    defaults.classes.push('solid', 'thin');
    if (color) {
      defaults.styles += `border-color: ${color};`;
      defaults.styles += `color: ${color};`;
    } else if (info) {
      config.classes.push('bd-info', 'tx-info');
    } else if (warning) {
      config.classes.push('bd-warning', 'tx-warning');
    } else if (success) {
      config.classes.push('bd-success', 'tx-success');
    } else if (error) {
      config.classes.push('bd-error', 'tx-error');
    } else if (muted) {
      config.classes.push('bd-muted', 'tx-muted');
    }
  } else {
    defaults.styles += `color: ${colors.white};`;
    if (color) {
      defaults.styles += `background-color: ${color};`;
    } else if (info) {
      config.classes.push('bg-info');
    } else if (warning) {
      config.classes.push('bg-warning');
    } else if (success) {
      config.classes.push('bg-success');
    } else if (error) {
      config.classes.push('bg-error');
    } else if (muted) {
      config.classes.push('bg-muted');
    }
  } 

  const map = {
    classes: [ ...defaults.classes, classnames() ].join(' '),
    styles: { ...defaults.styles, ...style }
  };
</script>
<div class={map.classes} style={map.styles}>
  {children()}
</div>