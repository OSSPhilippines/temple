<script observe="error,disabled">
  const host = this;
  //helper to extract attributes
  const attr = () => {
    const { 
      error = false, change, update,
      //dont need these...
      style, 'class': _,
      //input attributes
      ...attributes
    } = host.props;
    const classlist = [ 
      'p-7', 
      'b-1', 
      'block',
      'b-solid', 
      'box-border', 
      'w-full',
      'h-full',
      'tx-inherit'
    ];
    if (error) {
      classlist.push('b-error', 'tx-error');
    } else {
      classlist.push('b-black', 'tx-black');
    }
    attributes['class'] = classlist.join(' ');
    return { error, change, update, classlist, attributes };
  };
  //get props
  const { error, change, update, attributes } = attr();
  const exclude = ['error', 'change', 'update', 'class', 'style'];
  const children = host.originalChildren;
  //handlers
  const onchange = e => {
    change && change(e);
    update && update(e.target.value);
  };
  const onattr = e => {
    const { action, name, prev, value, target } = e.detail;
    const input = target.querySelector('input');
    //set new class
    if (name === 'error') {
      if (action === 'remove') {
        input.classList.remove('b-error', 'tx-error');
        input.classList.add('b-black', 'tx-black');
      } else {
        input.classList.remove('b-black', 'tx-black');
        input.classList.add('b-error', 'tx-error');
      }
      return;
      //dont update if these are the names
    } else if (!input || exclude.includes(name)) {
      return;
    }
    switch (action) {
      case 'add':
      case 'update':
        input.setAttribute(name, value);
        break;
      case 'remove':
        input.removeAttribute(name);
        break;
    }
  }
</script>
<textarea {...attributes} attr={onattr} change={onchange}>{
  children
}</textarea>