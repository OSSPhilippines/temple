<link rel="import" type="component" href="./input.tml" name="tui-input" />
<script observe="error,accept,autocomplete,checked,disabled,max,min,multiple,name,pattern,readonly,required,step,value">
  import Pickr from '@simonwep/pickr';
  //get props
  const { 
    input = '',
    width = 34,
    //dont need these...
    style, 'class': _,
    //input attributes
    ...attributes
  } = this.props;
  //determine host class display
  if (!this.classList.contains('block') 
    && !this.classList.contains('flex')
    && !this.classList.contains('none')
    && !this.classList.contains('inline')
    && !this.classList.contains('inline-block')
  ) {
    this.classList.add('inline-block');
  }
  //handlers
  const handlers = {
    mount: e => {
      const container = e.detail.target
      const input = container.querySelector('tui-input');
      const box = container.querySelector('span');
      const pickr = Pickr.create({
        el: box,
        theme: 'classic', // or 'monolith', or 'nano'
        swatches: [
          'rgba(244, 67, 54, 1)',     'rgba(233, 30, 99, 0.95)',
          'rgba(156, 39, 176, 0.9)',  'rgba(103, 58, 183, 0.85)',
          'rgba(63, 81, 181, 0.8)',   'rgba(33, 150, 243, 0.75)',
          'rgba(3, 169, 244, 0.7)',   'rgba(0, 188, 212, 0.7)',
          'rgba(0, 150, 136, 0.75)',  'rgba(76, 175, 80, 0.8)',
          'rgba(139, 195, 74, 0.85)', 'rgba(205, 220, 57, 0.9)',
          'rgba(255, 235, 59, 0.95)', 'rgba(255, 193, 7, 1)'
        ],
        components: {
          // Main components
          preview: true,
          opacity: true,
          hue: true,
          // Input / output Options
          interaction: {
            hex: true,   rgba: true,
            hsla: true,  hsva: true,
            cmyk: true,  input: true,
            clear: true, save: true
          }
        }
      });
      pickr.on('save', (color, instance) => {
        input.setAttribute('value', color.toHEXA().toString());
        pickr.hide();
      });
      if (width) {
        pickr.getRoot().root.style.width = `${width}px`;
      }
    },
    attribute: e => {
      //accepts: error,accept,autocomplete,checked,disabled,max,min,
      //         multiple,name,pattern,readonly,required,step,value
      const { action, name, prev, value, target } = e.detail;
      const input = target.querySelector('tui-input');
      console.log(target, input)
      switch (action) {
        case 'add':
        case 'update':
          input.setAttribute(name, value);
          break;
        case 'remove':
          input.removeAttribute(name);
          break;
      }
    }
  };
  this.on('attributechange', handlers.attribute);
</script>
<div class="flex" mount={handlers.mount}>
  <span class="w-34"></span>
  <tui-input {...attributes} class={input} />
</div>