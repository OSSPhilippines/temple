<script>
  import TempleRegistry from '@ossph/temple/dist/client/TempleRegistry';
  // Separate component related props from field attributes
  const { 
    block,     full,    color,
    xs,        sm,      md,
    lg,        xl,      xl2, 
    xl3,       xl4,     xl5, 
    curved,    rounded, pill,
    info,      warning, success, 
    error,     muted,   primary, 
    secondary, outline, transparent, 
    solid,     href,
    //dont need these
    style,    'class': _,
    //get the rest
    ...attributes 
  } = this.props;
  //make a button
  const button = TempleRegistry.createElement(
    href ? 'a' : 'button', 
    { ...attributes, href },
    this.originalChildren || []
  ).element;
  //default styles
  button.classList.add(
    'tx-center', 
    'tx-nodecor', 
    'cursor-pointer'
  );
  //determine display
  if (block) {
    this.classList.add('block');
    button.classList.add('block');
  } else if (this.classList.contains('block')) {
    button.classList.add('block');
  } else if (this.classList.contains('flex')) {
    button.classList.add('flex');
  } else if (this.classList.contains('none')) {
    button.classList.add('none');
  } else if (this.classList.contains('inline')) {
    button.classList.add('inline');
  } else if (this.classList.contains('inline-block')) {
    button.classList.add('inline-block');
  } else {
    this.classList.add('inline-block');
    button.classList.add('inline-block');
  }
  //determine size
  if (full) {
    this.classList.add('w-full');
    button.classList.add('w-full');
  }
  //determine padding by size
  xs ? button.classList.add('py-2', 'px-4')
  : sm ? button.classList.add('py-5', 'px-10')
  : md ? button.classList.add('py-8', 'px-16')
  : lg ? button.classList.add('py-12', 'px-24')
  : xl ? button.classList.add('py-15', 'px-30')
  : xl2 ? button.classList.add('py-18', 'px-36')
  : xl3 ? button.classList.add('py-22', 'px-44')
  : xl4 ? button.classList.add('py-26', 'px-52')
  : xl5 ? button.classList.add('py-30', 'px-60')
  : null;
  //determine curve
  if (curved) {
    button.classList.add('curved');
  } else if (rounded) {
    button.classList.add('rounded');
  } else if (pill) {
    button.classList.add('pill');
  }
  //determine layout
  const layout = outline ? 'outline' 
    : transparent ? 'transparent'
    : solid  ? 'solid'
    : 'solid';
  //if layout is outline or transparent
  if (layout === 'outline' || layout === 'transparent') {
    button.classList.add('b-solid', 'b-thin');
    if (layout === 'outline') {
      button.classList.add('bg-white');
    } else {
      button.classList.add('bg-none');
    }
    if (color) {
      button.style.color = color;
      button.style.borderColor = color;
    } else if (info) {
      button.classList.add('b-info', 'tx-info');
    } else if (warning) {
      button.classList.add('b-warning', 'tx-warning');
    } else if (success) {
      button.classList.add('b-success', 'tx-success');
    } else if (error) {
      button.classList.add('b-error', 'tx-error');
    } else if (muted) {
      button.classList.add('b-muted', 'tx-muted');
    } else if (primary) {
      button.classList.add('b-primary', 'tx-primary');
    } else if (secondary) {
      button.classList.add('b-secondary', 'tx-secondary');
    }
  //it's solid
  } else {
    button.classList.add('b-0', 'tx-white');
    if (color) {
      button.style.backgroundColor = color;
    } else if (info) {
      button.classList.add('bg-info');
    } else if (warning) {
      button.classList.add('bg-warning');
    } else if (success) {
      button.classList.add('bg-success');
    } else if (error) {
      button.classList.add('bg-error');
    } else if (muted) {
      button.classList.add('bg-muted');
    } else if (primary) {
      button.classList.add('bg-primary');
    } else if (secondary) {
      button.classList.add('bg-secondary');
    }
  } 
</script>
{[ button ]}