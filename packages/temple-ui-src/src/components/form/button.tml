<script>
  import { props, children, component } from '@ossph/temple';
  // Separate component related props from field attributes
  const { 
    block,     full,    color,
    xs,        sm,      md,
    lg,        xl,      xl2, 
    xl3,       xl4,     xl5, 
    curved,    rounded, pill,
    info,      warning, success, 
    error,     muted,   primary, 
    secondary, outline, transparent, 
    solid,     href,
    //dont need these
    style,    'class': _,
    //get the rest
    ...attributes 
  } = props();

  //get the host element
  const host = component();
  //make a button
  const button =  document.createElement(href ? 'a' : 'button');
  //add attributes to the button
  Object.entries(attributes).forEach(
    ([key, value]) => button.setAttribute(key, value)
  );
  if (href) {
    button.setAttribute('href', href);
  }
  //add children to the button
  children().forEach(child => button.appendChild(child));

  button.classList.add(
    'inline-block', 
    'tx-center', 
    'tx-nodecor', 
    'cursor-pointer'
  );

  if (block) {
    host.classList.add('block');
    button.classList.add('block');
  } else {
    host.classList.add('inline-block');
    button.classList.add('inline-block');
  }
  if (full) {
    host.classList.add('w-full');
    button.classList.add('w-full');
  }

  //determine size
  const size = xs ? button.classList.add('py-2', 'px-4')
    : sm ? button.classList.add('py-4', 'px-8')
    : md ? button.classList.add('py-6', 'px-12')
    : lg ? button.classList.add('py-8', 'px-16')
    : xl ? button.classList.add('py-10', 'px-20')
    : xl2 ? button.classList.add('py-12', 'px-24')
    : xl3 ? button.classList.add('py-14', 'px-28')
    : xl4 ? button.classList.add('py-16', 'px-32')
    : xl5 ? button.classList.add('py-18', 'px-36')
    : button.classList.add('py-6', 'px-12');

  if (curved) {
    button.classList.add('curved');
  } else if (rounded) {
    button.classList.add('rounded');
  } else if (pill) {
    button.classList.add('pill');
  }

  const layout = outline ? 'outline' 
    : transparent ? 'transparent'
    : solid  ? 'solid'
    : 'solid';

  if (layout === 'outline' || layout === 'transparent') {
    button.classList.add('bd-solid', 'bd-thin');
    if (layout === 'outline') {
      button.classList.add('bg-white');
    } else {
      button.classList.add('bg-none');
    }
    if (color) {
      button.style.color = color;
      button.style.borderColor = color;
    } else if (info) {
      button.classList.add('bd-info', 'tx-info');
    } else if (warning) {
      button.classList.add('bd-warning', 'tx-warning');
    } else if (success) {
      button.classList.add('bd-success', 'tx-success');
    } else if (error) {
      button.classList.add('bd-error', 'tx-error');
    } else if (muted) {
      button.classList.add('bd-muted', 'tx-muted');
    } else if (primary) {
      button.classList.add('bd-primary', 'tx-primary');
    } else if (secondary) {
      button.classList.add('bd-secondary', 'tx-secondary');
    }
  } else {
    button.classList.add('bd-0', 'tx-white');
    if (color) {
      button.style.backgroundColor = color;
    } else if (info) {
      button.classList.add('bg-info');
    } else if (warning) {
      button.classList.add('bg-warning');
    } else if (success) {
      button.classList.add('bg-success');
    } else if (error) {
      button.classList.add('bg-error');
    } else if (muted) {
      button.classList.add('bg-muted');
    } else if (primary) {
      button.classList.add('bg-primary');
    } else if (secondary) {
      button.classList.add('bg-secondary');
    }
  } 
</script>
{[ button ]}