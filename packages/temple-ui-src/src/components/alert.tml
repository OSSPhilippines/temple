<script>
  // Separate component related props from field attributes
  const { 
    curved, rounded,   pill,    
    info,   warning,   success, 
    error,  muted,     primary, 
    color,  secondary, outline,
    solid,  transparent
  } = this.props;

  //get the host element
  const classes = this.className.split(' ');
  const children = this.originalChildren;
  //determine display
  if (!classes.find(
    classname => classname.includes('block')
      || classname.includes('flex')
      || classname.includes('none')
      || classname.includes('inline')
      || classname.includes('inline-block')
  )) {
    this.classList.add('block');
  }
  //determine padding
  if (!classes.find(
    classname => classname.includes('p-')
      || classname.includes('px-')
      || classname.includes('py-')
      || classname.includes('pt-')
      || classname.includes('pr-')
      || classname.includes('pb-')
      || classname.includes('pl-')
  )) {
    this.classList.add('p-16');
  }
  //determine curve
  if (curved) {
    this.classList.add('curved');
  } else if (rounded) {
    this.classList.add('rounded');
  } else if (pill) {
    this.classList.add('pill');
  }
  //determine layout
  const layout = outline ? 'outline' 
    : transparent ? 'transparent'
    : solid  ? 'solid'
    : 'solid';
  //if outline or transparent
  if (layout === 'outline' || layout === 'transparent') {
    this.classList.add('bd-solid', 'bd-thin');
    if (layout === 'outline') {
      this.classList.add('bg-white');
    }
    if (color) {
      this.style.color = color;
      this.style.borderColor = color;
    } else if (info) {
      this.classList.add('bd-info', 'tx-info');
    } else if (warning) {
      this.classList.add('bd-warning', 'tx-warning');
    } else if (success) {
      this.classList.add('bd-success', 'tx-success');
    } else if (error) {
      this.classList.add('bd-error', 'tx-error');
    } else if (muted) {
      this.classList.add('bd-muted', 'tx-muted');
    } else if (primary) {
      this.classList.add('bd-primary', 'tx-primary');
    } else if (secondary) {
      this.classList.add('bd-secondary', 'tx-secondary');
    }
  //it's solid
  } else {
    this.classList.add('tx-white');
    if (color) {
      this.style.backgroundColor = color;
    } else if (info) {
      this.classList.add('bg-info');
    } else if (warning) {
      this.classList.add('bg-warning');
    } else if (success) {
      this.classList.add('bg-success');
    } else if (error) {
      this.classList.add('bg-error');
    } else if (muted) {
      this.classList.add('bg-muted');
    } else if (primary) {
      this.classList.add('bg-primary');
    } else if (secondary) {
      this.classList.add('bg-secondary');
    }
  } 
</script>
{children}