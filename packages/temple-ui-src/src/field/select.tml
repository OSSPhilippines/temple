<link rel="import" type="component" href="./input.tml" name="field-input" />
<link rel="import" type="component" href="../element/icon.tml" name="element-icon" />
<style>
  .select {
    color: var(--black);
    position: relative;
  }
  .display {
    display: flex;
    align-items: center;
    padding: 7px;
    border: 1px solid var(--black);
    background-color: var(--white);
  }
  .selected {
    width: 100%;
    overflow: auto;
    display: flex;
    align-items: center;
    flex-grow: 1;
    gap: 5px;
    cursor: pointer;
    white-space: nowrap;
  }
  .placeholder {
    color: var(--muted);
    font-style: italic;
  }
  .count {
    display: inline-block;
    padding-left: 4px;
    color: var(--muted);
    font-size: 12px;
  }
  .clear, .toggle, .add {
    cursor: pointer;
  }
  .dropdown {
    background-color: var(--white);
    border: 1px solid var(--black);
    overflow: auto;
    position: absolute;
    width: 100%;
    max-height: 200px;
  }
  .form {
    display: flex;
    align-items: center;
    margin: 5px;
    padding: 7px;
    border: 1px solid var(--muted);
    height: 18px;
  }
  .input {
    flex-grow: 1;
    padding: 0;
    border: 0;
    background-color: transparent;
  }
  .search {
    color: var(--muted);
  }
  .options {
    overflow: auto;
    cursor: pointer;
  }
  ::slotted(.select-default-option) {
    padding: 7px;
  }
  ::slotted(.select-default-option:hover) {
    background-color: var(--muted);
  }
  .selected ::slotted(.select-default-option) {
    padding: 0;
  }
  .selected ::slotted(.select-default-option:hover) {
    background-color: transparent;
  }
</style>
<script>
  import { getHandlers } from '../utilities/select';
  //extract props
  const { placeholder, custom, search, name } = this.props;
  //format initial options from the original children
  const options = this.originalChildren
    .filter(option => option instanceof Element)
    .filter(option => option.nodeName !== 'INPUT' 
      || !option.hasAttribute('type')
      || option.getAttribute('type') !== 'hidden'
    )
    .filter(option => !option.hasAttribute('slot') 
      || option.getAttribute('slot') === 'filtered'
    )
    .map(option => {
      if (option.nodeName !== 'OPTION') {
        return option;
      }
      const attributes = this.getElement(option)?.attributes || {};
      attributes.value = attributes.value ? attributes.value 
        : option.hasAttribute('value') ? option.getAttribute('value')
        : option.innerText.trim();
      attributes.keyword = attributes.keyword ? attributes.keyword
        : option.hasAttribute('keyword') ? option.getAttribute('keyword')
        : undefined;
      attributes['class'] = attributes['class'] ? attributes['class']
        : option.hasAttribute('class') ? option.getAttribute('class')
        : 'select-default-option';
      const children = Array.from(option.childNodes);
      return this.createElement('div', attributes, children).element;
    });
  //get handlers
  const { state, clear, toggle, filter, add } = getHandlers(this, options);
</script>
<template type="light">
  <if true={name}>
    <each value=value from={state.value.values}>
      <input type="hidden" {name} value={value.toString()} />
    </each>
  </if>
  {state.value.selected}
  {state.value.filtered}
</template>
<template type="shadow">
  <div class="select">
    <div class="display">
      <div class="selected" click={toggle}>
        <if true={state.value.selected.length > 0}>
          <slot name="selected"></slot>
        <elif true={placeholder} />
          <span class="placeholder">
            {placeholder}
          </span>
        </if>
      </div>
      <if true={state.value.selected.length > 1}>
        <em class="count">({state.value.selected.length})</em>
      </if>
      <if true={state.value.selected.length > 0}>
        <element-icon class="clear" name="times" click={clear} />
      </if>
      <if true={state.value.filtered.length > 0 || state.value.query.length > 0}>
        <if true={state.value.show}>
          <element-icon class="toggle" name="caret-up" click={toggle} />
        <else />
          <element-icon class="toggle" name="caret-down" click={toggle} />
        </if>
      </if>
    </div>
    <if true={state.value.show && (state.value.filtered.length > 0 || state.value.query.length > 0)}>
      <div class="dropdown">
        <if true={search || custom}>
          <div class="form">
            <if true={search}>
              <field-input 
                class="input" 
                padding="0"
                value={state.value.query} 
                keyup={filter} 
              />
            <else />
              <field-input 
                class="input"  
                padding="0"
                value={state.value.query} 
              />
            </if>
            <if true={custom}>
              <element-icon class="add" name="plus" click={add} />
            <else />
              <element-icon class="search" name="search" />
            </if>
          </div>
        </if>
        <div class="options"><slot name="filtered"></slot></div>
      </div>
    </if>
  </div>
</template>