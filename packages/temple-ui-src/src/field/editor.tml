<style>
  .CodeMirror {
    font-family: monospace;
    height: 100%;
    color: black;
  }

  .CodeMirror-lines {
    padding: 4px 0;
  }
  .CodeMirror pre {
    padding: 0 4px;
  }

  .CodeMirror-scrollbar-filler, 
  .CodeMirror-gutter-filler {
    background-color: white; 
  }

  .CodeMirror-gutters {
    border-right: 1px solid #DDDDDD;
    background-color: #F7F7F7;
    white-space: nowrap;
  }
  .CodeMirror-linenumbers {}
  .CodeMirror-linenumber {
    padding: 0 3px 0 5px;
    min-width: 20px;
    text-align: right;
    color: #999999;
    white-space: nowrap;
  }

  .CodeMirror-guttermarker { 
    color: black; 
  }
  .CodeMirror-guttermarker-subtle { 
    color: #999999; 
  }

  .CodeMirror-cursor {
    border-left: 1px solid black;
    border-right: none;
    width: 0;
  }
  .CodeMirror div.CodeMirror-secondarycursor {
    border-left: 1px solid silver;
  }
  .cm-fat-cursor .CodeMirror-cursor {
    width: auto;
    border: 0;
    background: #77EE77;
  }
  .cm-fat-cursor div.CodeMirror-cursors {
    z-index: 1;
  }

  .cm-animate-fat-cursor {
    -moz-animation: blink 1.06s steps(1) infinite;
    -webkit-animation: blink 1.06s steps(1) infinite;
    animation: blink 1.06s steps(1) infinite;
    border: 0;
    background-color: #77EE77;
    width: auto;
  }
  @-moz-keyframes blink {
    0% {}
    50% { 
      background-color: transparent; 
    }
    100% {}
  }
  @-webkit-keyframes blink {
    0% {}
    50% { 
      background-color: transparent; 
    }
    100% {}
  }
  @keyframes blink {
    0% {}
    50% { 
      background-color: transparent; 
    }
    100% {}
  }

  .CodeMirror-overwrite .CodeMirror-cursor {}

  .cm-tab { 
    display: inline-block; 
    text-decoration: inherit; 
  }

  .CodeMirror-ruler {
    border-left: 1px solid #CCCCCC;
    position: absolute;
  }

  .cm-s-default .cm-header {
    color: blue;
  }
  .cm-s-default .cm-quote {
    color: #009900;
  }
  .cm-negative {
    color: #DD4444;
  }
  .cm-positive {
    color: #229922;
  }
  .cm-header, .cm-strong {
    font-weight: bold;
  }
  .cm-em {
    font-style: italic;
  }
  .cm-link {
    text-decoration: underline;
  }
  .cm-strikethrough {
    text-decoration: line-through;
  }

  .cm-s-default .cm-keyword {
    color: #770088;
  }
  .cm-s-default .cm-atom {
    color: #221199;
  }
  .cm-s-default .cm-number {
    color: #116644;
  }
  .cm-s-default .cm-def {
    color: #0000FF;
  }
  .cm-s-default .cm-variable,
  .cm-s-default .cm-punctuation,
  .cm-s-default .cm-property,
  .cm-s-default .cm-operator {}
  .cm-s-default .cm-variable-2 {
    color: #0055AA;
  }
  .cm-s-default .cm-variable-3 {
    color: #008855;
  }
  .cm-s-default .cm-comment {
    color: #AA5500;
  }
  .cm-s-default .cm-string {
    color: #AA1111;
  }
  .cm-s-default .cm-string-2 {
    color: #FF5500;
  }
  .cm-s-default .cm-meta {
    color: #555555;
  }
  .cm-s-default .cm-qualifier {
    color: #555555;
  }
  .cm-s-default .cm-builtin {
    color: #3300AA;
  }
  .cm-s-default .cm-bracket {
    color: #999977;
  }
  .cm-s-default .cm-tag {
    color: #117700;
  }
  .cm-s-default .cm-attribute {
    color: #0000CC;
  }
  .cm-s-default .cm-hr {
    color: #999999;
  }
  .cm-s-default .cm-link {
    color: #0000CC;
  }

  .cm-s-default .cm-error {
    color: #FF0000;
  }
  .cm-invalidchar {
    color: #FF0000;
  }

  .CodeMirror-composing { 
    border-bottom: 2px solid; 
  }

  div.CodeMirror span.CodeMirror-matchingbracket {
    color: #00FF00;
  }
  div.CodeMirror span.CodeMirror-nonmatchingbracket {
    color: #FF2222;
  }
  .CodeMirror-matchingtag { 
    background: rgba(255, 150, 0, .3); 
  }
  .CodeMirror-activeline-background {
    background: #E8F2FF;
  }

  .CodeMirror {
    position: relative;
    overflow: hidden;
    background: white;
  }

  .CodeMirror-scroll {
    overflow: scroll !important; 
    margin-bottom: -30px; margin-right: -30px;
    padding-bottom: 30px;
    height: 100%;
    outline: none; 
    position: relative;
  }
  .CodeMirror-sizer {
    position: relative;
    border-right: 30px solid transparent;
  }

  .CodeMirror-vscrollbar, 
  .CodeMirror-hscrollbar, 
  .CodeMirror-scrollbar-filler, 
  .CodeMirror-gutter-filler {
    position: absolute;
    z-index: 6;
    display: none;
  }
  .CodeMirror-vscrollbar {
    right: 0; top: 0;
    overflow-x: hidden;
    overflow-y: scroll;
  }
  .CodeMirror-hscrollbar {
    bottom: 0; left: 0;
    overflow-y: hidden;
    overflow-x: scroll;
  }
  .CodeMirror-scrollbar-filler {
    right: 0; bottom: 0;
  }
  .CodeMirror-gutter-filler {
    left: 0; bottom: 0;
  }

  .CodeMirror-gutters {
    position: absolute; left: 0; top: 0;
    min-height: 100%;
    z-index: 3;
  }
  .CodeMirror-gutter {
    white-space: normal;
    height: 100%;
    display: inline-block;
    vertical-align: top;
    margin-bottom: -30px;
  }
  .CodeMirror-gutter-wrapper {
    position: absolute;
    z-index: 4;
    background: none !important;
    border: none !important;
  }
  .CodeMirror-gutter-background {
    position: absolute;
    top: 0; bottom: 0;
    z-index: 4;
  }
  .CodeMirror-gutter-elt {
    position: absolute;
    cursor: default;
    z-index: 4;
  }
  .CodeMirror-gutter-wrapper {
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }

  .CodeMirror-lines {
    cursor: text;
    min-height: 1px;
  }
  .CodeMirror pre {
    -moz-border-radius: 0; 
    -webkit-border-radius: 0; 
    border-radius: 0;
    border-width: 0;
    background: transparent;
    font-family: inherit;
    font-size: inherit;
    margin: 0;
    white-space: pre;
    word-wrap: normal;
    line-height: inherit;
    color: inherit;
    z-index: 2;
    position: relative;
    overflow: visible;
    -webkit-tap-highlight-color: transparent;
    -webkit-font-variant-ligatures: none;
    font-variant-ligatures: none;
  }
  .CodeMirror-wrap pre {
    word-wrap: break-word;
    white-space: pre-wrap;
    word-break: normal;
  }

  .CodeMirror-linebackground {
    position: absolute;
    left: 0; right: 0; top: 0; bottom: 0;
    z-index: 0;
  }

  .CodeMirror-linewidget {
    position: relative;
    z-index: 2;
    overflow: auto;
  }

  .CodeMirror-widget {}

  .CodeMirror-code {
    outline: none;
  }

  .CodeMirror-scroll,
  .CodeMirror-sizer,
  .CodeMirror-gutter,
  .CodeMirror-gutters,
  .CodeMirror-linenumber {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
  }

  .CodeMirror-measure {
    position: absolute;
    width: 100%;
    height: 0;
    overflow: hidden;
    visibility: hidden;
  }

  .CodeMirror-cursor { 
    position: absolute; 
  }
  .CodeMirror-measure pre { 
    position: static; 
  }

  div.CodeMirror-cursors {
    visibility: hidden;
    position: relative;
    z-index: 3;
  }
  div.CodeMirror-dragcursors {
    visibility: visible;
  }

  .CodeMirror-focused div.CodeMirror-cursors {
    visibility: visible;
  }

  .CodeMirror-selected { 
    background: #D9D9D9; 
  }
  .CodeMirror-focused .CodeMirror-selected { 
    background: #D7D4F0; 
  }
  .CodeMirror-crosshair { 
    cursor: crosshair; 
  }
  .CodeMirror-line::selection, 
  .CodeMirror-line > span::selection, 
  .CodeMirror-line > span > span::selection { 
    background: #D7D4F0; 
  }
  .CodeMirror-line::-moz-selection, 
  .CodeMirror-line > span::-moz-selection, 
  .CodeMirror-line > span > span::-moz-selection { 
    background: #D7D4F0; 
  }

  .cm-searching {
    background: #FFFFAA;
    background: rgba(255, 255, 0, .4);
  }

  .cm-force-border { 
    padding-right: .1px; 
  }

  @media print {
    .CodeMirror div.CodeMirror-cursors {
      visibility: hidden;
    }
  }

  .cm-tab-wrap-hack:after { 
    content: ''; 
  }

  span.CodeMirror-selectedtext { 
    background: none; 
  }
</style>
<script>
  import type { ChangeEvent } from '@ossph/temple/dist/types';
  import StyleSet from '@ossph/temple/dist/style/StyleSet';
  import setDisplay from '../utilities/style/display';
  import CodeMirror from 'codemirror';
  const { 
    lang = 'htmlmixed', numbers, change, update, value,
    //dont need these...
    style, 'class': _,
    //input attributes
    ...attributes
  } = this.props;
  //override default styles
  const styles = new StyleSet();
  const css = this.styles();
  this.styles = () => css + styles.toString();
  //determine display
  setDisplay(this.props, styles, 'block', ':host');
  //get children
  const children = this.originalChildren;
  //set handlers
  const handlers = {
    update: (textarea, value) => {
      textarea.value = value;
      textarea.dispatchEvent(new Event('change', { bubbles: true }));
    },
    change: (e: ChangeEvent<HTMLTextareaElement>) => {
      const textarea = this.querySelector('textarea');
      if (textarea) {
        textarea.value = e.target.value;
      }
      change && change(e);
      update && update(e.target.value);
    },
    init: (mode: string, textarea: HTMLTextareaElement) => {
      const defaultValue = textarea.value || value;
      this._editor = CodeMirror.fromTextArea(textarea, {
        mode,
        lineNumbers: numbers,
        tabSize: 2
      });
      defaultValue && this._editor.setValue(defaultValue);
      this._editor.on('change', () => handlers.update(
        textarea, 
        this._editor.getValue()
      ));
    },
    mount: () => {
      const textarea = this.shadowRoot?.querySelector('textarea');
      if (!textarea) return;
      switch (lang) {
        case 'md':
        case 'markdown': import('codemirror/mode/markdown/markdown')
          .then(() => handlers.init('markdown', textarea)); break;
        case 'css': import('codemirror/mode/css/css')
          .then(() => handlers.init('css', textarea)); break;
        case 'js':
        case 'javascript': import('codemirror/mode/javascript/javascript')
          .then(() => handlers.init('javascript', textarea)); break;
        case 'json': import('codemirror/mode/javascript/javascript')
          .then(() => handlers.init('application/json', textarea)); break;
        case 'ts':
        case 'typescript': import('codemirror/mode/javascript/javascript')
          .then(() => handlers.init('application/typescript', textarea)); break;
        case 'html':
        case 'htmlmixed':
        default: import('codemirror/mode/htmlmixed/htmlmixed')
          .then(() => handlers.init('htmlmixed', textarea)); break;
      }
    }
  };
</script>
<template type="light">
  <textarea {...attributes} value={value}>{children}</textarea>
</template>
<template type="shadow">
  <textarea 
    {...attributes} 
    mount={handlers.mount}
    change={handlers.change}
    value={value}
  >{children}</textarea>
</template>