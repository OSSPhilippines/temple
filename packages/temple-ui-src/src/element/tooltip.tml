<script>
  import StyleSet from '@ossph/temple/dist/style/StyleSet';
  import setColor from '../utilities/style/color';
  //make handlers
  const handlers = {
    over: () => {
      const tip = this.shadowRoot?.querySelector('div');
      tip && (tip.style.display = 'block');
    },
    out: () => {
      const tip = this.shadowRoot?.querySelector('div');
      tip && (tip.style.display = 'none');
    },
    mount: () => {
      if (this.parentNode) {
        this.parentNode.addEventListener('mouseover', handlers.over);
        this.parentNode.addEventListener('mouseout', handlers.out);
      }
    },
    unmount: () => {
      if (this.parentNode) {
        this.parentNode.removeEventListener('mouseover', handlers.over);
        this.parentNode.removeEventListener('mouseout', handlers.out);
      }
    },
    numeric: (value) => {
      return !isNaN(parseFloat(value)) && isFinite(value);
    }
  };
  //get props
  const { 
    //position
    top, bottom, left, right, 
    //colors
    color,   white, black, info,    warning, 
    success, error, muted, primary, secondary, 
    //layout
    curved, curve, center, padding, opacity, width = 'auto',
    //sub-props
    background
  } = this.propsTree;
  //override default styles
  const styles = new StyleSet();
  this.styles = () => styles.toString();
  //default host styles
  styles.add(':host', 'position', 'relative');
  styles.add(':host', 'display', 'block');
  styles.add(':host', 'width', '100%');
  //determine host color
  setColor(this.props, styles, false, ':host', 'color');
  //determine text alignment
  if (center) {
    styles.add(':host', 'text-align', 'center');
  }
  //default div styles
  styles.add('div', 'position', 'absolute');
  styles.add('div', 'display', 'none');
  //determine background color
  if (background) {
    setColor(background, styles, false, 'div', 'background-color');
  }
  //determine padding
  if (padding) {
    styles.add('div', 'padding', `${padding}px`);
  }
  //determine opacity
  if (opacity) {
    styles.add(
      'div', 
      'opacity', 
      `${Math.min(Math.max(Number(opacity), 0), 100)}`
    );
  }
  //determine curve
  if (curved) {
    styles.add('div', 'border-radius', '4px');
  } else if (curve) {
    styles.add('div', 'border-radius', `${curve}px`);
  }
  //determine positions
  if (top === true) {
    styles.add('div', 'top', '0');
  } else if (handlers.numeric(top)) {
    styles.add('div', 'top', `${top}px`);
  } else if (typeof top === 'string') {
    styles.add('div', 'top', top);
  }
  if (right === true) {
    styles.add('div', 'right', '0');
  } else if (handlers.numeric(right)) {
    styles.add('div', 'right', `${right}px`);
  } else if (typeof right === 'string') {
    styles.add('div', 'right', right);
  }
  if (bottom === true) {
    styles.add('div', 'bottom', '0');
  } else if (handlers.numeric(bottom)) {
    styles.add('div', 'bottom', `${bottom}px`);
  } else if (typeof bottom === 'string') {
    styles.add('div', 'bottom', bottom);
  }
  if (left === true) {
    styles.add('div', 'left', '0');
  } else if (handlers.numeric(left)) {
    styles.add('div', 'left', `${left}px`);
  } else if (typeof left === 'string') {
    styles.add('div', 'left', left);
  }
  //determine width
  if (width === 'auto') {
    styles.add('div', 'width', 'auto');
  } else if (width) {
    styles.add('div', 'width', `${width}px`);
  }
</script>
<div mount={handlers.mount} unmount={handlers.unmount}>
  <slot></slot>
</div>